 <#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ include file="$(ProjectDir)DbHelper.ttinclude"  #> 
//  导入MultipleOutputHelper.ttinclude文件
<#@include file="MultipleOutputHelper.ttinclude"#> 







<#
      //初始化Manager对象 
	    
      var manager = Manager.Create(Host, GenerationEnvironment);  


	  //2.文件块：使用代码标识区分生成的代码块的范围
          manager.StartNewFile( config.TableName+"DBOBase.cs");
         //代码块bengin
		 #>



/**********************************************************************************************************************
 *  <auto-generated>
 *      此代码由T4模板自动生成
 *      运行时版本: 1.0.0.0
 *      
 *      对此文件的更改可能会导致不正确的行为。此外，如果重新生成代码，这些更改将会丢失。
 *		此为实体基类，只需重新生成不许修改
 *      Create date: <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#>
 *  </auto-generated>
 * ********************************************************************************************************************/

/**********************************************************************************************************************
 * 
 *  版权所有：(c)2015， 华跃博弈有限公司
 * 
 * ********************************************************************************************************************/


using System.Collections.Generic;

using <#=config.Namespace#>.BusinessEntity;
using HyBy.FrameWork.DAService;

namespace <#=config.Namespace#>.BusinessImplement
{	

	public class <#=config.TableName#>DBOBase : DBO
    {
        /// <summary>
        /// Set store procedures parameter
        /// </summary>
		public <#=config.TableName#>DBOBase()
		{
			///Sql Server 查询参数
            SqlDBMapping[SelectDBMappingIndex] = new DBMappingCollection();
			<# foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, config.TableName)){#>
			SqlDBMapping[SelectDBMappingIndex].Add(new SqlDBMapping("<#=column.ColumnName#>","<#=column.ColumnName#>",System.Data.SqlDbType.<#= column.GetSqlDbType#>));
			<#}#> 

			///Sql Server 更新参数
            SqlDBMapping[UpdateDBMappingIndex] = new DBMappingCollection();
		<# foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, config.TableName)){#>
		<#if(!column.IsPrimaryKey){#>SqlDBMapping[UpdateDBMappingIndex].Add(new SqlDBMapping("<#=column.ColumnName#>","<#=column.ColumnName#>",System.Data.SqlDbType.<#= column.GetSqlDbType#>));
		<#} else { continue; }#>
		<#}#> 

			///Sql Server 主键参数
            SqlDBMapping[PKDBMappingIndex] = new DBMappingCollection();
			<# foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, config.TableName)){#>
			<#if(column.IsPrimaryKey){#>
SqlDBMapping[PKDBMappingIndex].Add(new SqlDBMapping("<#=column.ColumnName#>","<#=column.ColumnName#>",System.Data.SqlDbType.<#= column.GetSqlDbType#>));
			<#} else { continue; }#> 
			<#}#> 
			
            ///Common 查询参数
			///DBMapping[SelectDBMappingIndex] = new DBMappingCollection();
			///<# foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, config.TableName)){#>
			///DBMapping[SelectDBMappingIndex].Add(new DBMapping("<#=column.ColumnName#>","<#=column.ColumnName#>",System.Data.SqlDbType.<#= column.GetSqlDbType#>));
			///<#}#> 

			 ///Common 更新参数
			/// DBMapping[UpdateDBMappingIndex] = new DBMappingCollection();
			///<# foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, config.TableName)){#>
			///DBMapping[UpdateDBMappingIndex].Add(new DBMapping("<#=column.ColumnName#>","<#=column.ColumnName#>",System.Data.SqlDbType.<#= column.GetSqlDbType#>));
			///<#}#> 

			  ///Common 主键参数
			///DBMapping[PKDBMappingIndex] = new DBMappingCollection();
			///<# foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, config.TableName)){#>
			///<#if(column.IsPrimaryKey){#>
			///DBMapping[PKDBMappingIndex].Add(new DBMapping("<#=column.ColumnName#>","<#=column.ColumnName#>",System.Data.SqlDbType.<#= column.GetSqlDbType#>));
			///<#} else { continue; }#> 
			///<#}#> 

		}

		/// <summary>
        /// Get Entity by id.
        /// </summary>
        /// <param name="entityID"></param>
        /// <returns>Entity</returns>
		public virtual <#=config.TableName#>Entity Get<#=config.TableName#>EntityByID(string entityID)
        {
            <#=config.TableName#>Entity item = new <#=config.TableName#>Entity();
            item.EntityID = entityID;
            this.Get<#=config.TableName#>Entity(item);
            return item;
        }

		/// <summary>
        /// Get Entity by Key
        /// </summary>
        /// <param name="item">Entity</param>
        public virtual void Get<#=config.TableName#>Entity(<#=config.TableName#>Entity item)
        {
                this.GetByKey("Get<#=config.TableName#>Entity", item);             
        }

		/// <summary>
        /// Insert Entity by Key
        /// </summary>
        /// <param name="item">Entity</param>
        public virtual void Insert<#=config.TableName#>Entity(<#=config.TableName#>Entity item)
        {
                this.InsertEntity("Insert<#=config.TableName#>Entity", item);          
        }

		/// <summary>
        /// Update Entity by Key
        /// </summary>
        /// <param name="item">Entity</param>
        public virtual void Update<#=config.TableName#>Entity(<#=config.TableName#>Entity item)
        {        
                this.UpdateByKey("Update<#=config.TableName#>Entity", item);            
        }

		/// <summary>
        /// Get All
        /// </summary>
        /// <param name="args">args</param>
        /// <returns>List</returns>
        public virtual List<<#=config.TableName#>Entity> Get<#=config.TableName#>Collection(Dictionary<string, object> args)
        {
            <#=config.TableName#>Entity item = new <#=config.TableName#>Entity();           
             return (List<<#=config.TableName#>Entity>)this.GetAllBySP("Get<#=config.TableName#>Collection", item, args);          
        }

    }
}


<#
		 //代码块end
         manager.EndBlock();
 #>

<# 
//第二个文件begin，Entity 继承 EntityBase
 manager.StartNewFile( config.TableName+"DBO.cs");
 #>
/**********************************************************************************************************************
 * 
 *  版权所有：(c)2015， 华跃博弈有限公司
 * 
 * ********************************************************************************************************************/


using HyBy.FrameWork.DAService;

  namespace <#=config.Namespace#>.BusinessImplement
{	 
 
	public class <#=config.TableName#>DBO:<#=config.TableName#>DBOBase
    {
		/// <summary>
        /// 如果未传入数据连接及事务控制对象，则使用默认的
        /// </summary>
        public <#=config.TableName#>DBO()
        {
        }
        
        /// <summary>
        /// 根据传入的数据连接及事务控件对象启用事务控制
        /// </summary>
        /// <param name="dac">数据连接入事务控制对象</param>
        public <#=config.TableName#>DBO(DataAccess dac)
        {
            this.dac = dac;
        }
    }
}



<# 
  //代码块end
  manager.EndBlock();
 #>


 <# 
//第三个文件begin，Entity 继承 EntityBase
 manager.StartNewFile( config.TableName+"ServiceBase.cs");
 #>
/**********************************************************************************************************************
 * 
 *  版权所有：(c)2015， 华跃博弈有限公司
 * 
 * ********************************************************************************************************************/

 using System;
 using System.Collections.Generic;

using <#=config.Namespace#>.BusinessInterface;
using <#=config.Namespace#>.BusinessEntity;
using HyBy.FrameWork.Common;
using HyBy.FrameWork.DAService;

using <#=config.Namespace#>.DAService;

  namespace <#=config.Namespace#>.BusinessImplement
{	 
 
	public class <#=config.TableName#>ServiceBase:BusinessObject, I<#=config.TableName#>ServiceBase 
    {
		 /// <summary>
        /// 根据ID获取 <#=config.TableName#>实体
        /// </summary>
        /// <param name="entityID"><#=config.TableName#>的ID</param>
        /// <returns><#=config.TableName#>Entity 对象</returns>
        public virtual <#=config.TableName#>Entity Get<#=config.TableName#>EntityByID(string entityID)
        {
            <#=config.TableName#>Entity item = new <#=config.TableName#>Entity();
            item.EntityID = entityID;
            return this.Get<#=config.TableName#>Entity(item);
        }

        /// <summary>
        /// 根据Entity获取 <#=config.TableName#>实体
        /// </summary>
        /// <param name="item"><#=config.TableName#>的实体</param>
        /// <returns><#=config.TableName#>Entity 对象</returns>
        public virtual <#=config.TableName#>Entity Get<#=config.TableName#>Entity(<#=config.TableName#>Entity item)
        {
            try
            {
                new <#=config.TableName#>DBO(dac).Get<#=config.TableName#>Entity(item);
                return item;
            }
            catch (Exception ex)
            {
                throw new CommonException(ex, CommonDeclare.EnumExceptionLevel.ERROR);
            }
        }
         
        /// <summary>
        /// 插入<#=config.TableName#>实体
        /// </summary>
        /// <param name="item"><#=config.TableName#>的实体</param>
        /// <returns>返回插入后获取的<#=config.TableName#>实体</returns>
        public virtual <#=config.TableName#>Entity Insert<#=config.TableName#>Entity(<#=config.TableName#>Entity item)
        {
            try
            {
                if ((dac.Scope == null))
                {
                    using (CommonScope scope = new CommonScope(dac))
                    {
                        new <#=config.TableName#>DBO(dac).Insert<#=config.TableName#>Entity(item);
                        scope.Complete();
                        return item;
                    }
                }
                else
                {
                    new <#=config.TableName#>DBO(dac).Insert<#=config.TableName#>Entity(item);
                    return item;
                }
            }
            catch (System.Exception ex)
            {
                throw new CommonException(ex, CommonDeclare.EnumExceptionLevel.ERROR);
            }
        }

        /// <summary>
        /// 更新<#=config.TableName#>实体
        /// </summary>
        /// <param name="item"><#=config.TableName#>的实体</param>
        public virtual void Update<#=config.TableName#>Entity(<#=config.TableName#>Entity item)
        {
            try
            {
                if ((dac.Scope == null))
                {
                    using (CommonScope scope = new CommonScope(dac))
                    {
                        new <#=config.TableName#>DBO(dac).Update<#=config.TableName#>Entity(item);
                        scope.Complete();
                    }
                }
                else
                {
                    new <#=config.TableName#>DBO(dac).Update<#=config.TableName#>Entity(item);
                }
            }
            catch (System.Exception ex)
            {
                throw new CommonException(ex, CommonDeclare.EnumExceptionLevel.ERROR);
            }
        }

        /// <summary>
        /// 获取<#=config.TableName#>实体集合
        /// </summary>
        /// <param name="item"><#=config.TableName#>的实体</param>
        public virtual List<<#=config.TableName#>Entity> Get<#=config.TableName#>Collection(System.Collections.Generic.Dictionary<string, object> args)
        {
            try
            {
                List<<#=config.TableName#>Entity> item = new List<<#=config.TableName#>Entity>();
                item = new <#=config.TableName#>DBO(dac).Get<#=config.TableName#>Collection(args);
                return item;
            }
            catch (System.Exception ex)
            {
                throw new CommonException(ex, CommonDeclare.EnumExceptionLevel.ERROR);
            }
        }
    }
}



<# 
  //代码块end
  manager.EndBlock();
 #>



 <# 
//第四个文件begin 
 manager.StartNewFile( config.TableName+"Service.cs");
 #>
/**********************************************************************************************************************
 * 
 *  版权所有：(c)2015， 华跃博弈有限公司
 * 
 * ********************************************************************************************************************/

using <#=config.Namespace#>.BusinessInterface;
using HyBy.FrameWork.DAService;

  namespace <#=config.Namespace#>.BusinessImplement
{	 
 
	public class <#=config.TableName#>Service: <#=config.TableName#>ServiceBase, I<#=config.TableName#>Service
    {
		/// <summary>
        /// 如果未传入数据连接及事务控制对象，则使用默认的
        /// </summary>
        public <#=config.TableName#>Service()
        {
        }
        
        /// <summary>
        /// 根据传入的数据连接及事务控件对象启用事务控制
        /// </summary>
        /// <param name="dac">数据连接入事务控制对象</param>
        public <#=config.TableName#>Service(DataAccess dac)
        {
            this.dac = dac;
        }
    }
}



<# 
  //代码块end
  manager.EndBlock();
 #>






 <# 
 //3.编译执行：使用Process方法，进行文件分割
 manager.Process(true);
#>

 
 